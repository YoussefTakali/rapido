generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  phoneNumber    String?
  dateOfBirth    DateTime?
  role           Role
  createdAt      DateTime         @default(now()) 
  profilePicture String?          @default("defaultpp.jpg")
  isOnline       Boolean          @default(false)
  lastSeen       DateTime?        // Optional in case user was never online
  userProfiles   UserProfile[]
  devises        Devis[]          @relation("UserDevis")
  calendarEvents CalendarEvent[]
  receivedNotifications Notification[] @relation("NotificationReceiver")
  createdNotifications  Notification[] @relation("NotificationCreator")// <-- Add this line for back relation

}

model Client {
  id        Int     @id @default(autoincrement())
  nom       String
  prenom    String
  email     String  @unique
  telephone String
  devis     Devis[]
}

model Profile {
  id                    Int           @id @default(autoincrement())
  companyName           String
  formeJuridique        String
  capitalSocial         Decimal
  siret                 String
  tva                   String
  rcsOuRm               String
  adresse               String
  logo                  String?      @default("defaultpp.jpg")
  nomAssurance          String
  montantMobilier       Decimal
  montantMaxParObjet    Decimal
  franchise             Decimal
  pourcentageAcompte    Decimal
  bic                   String
  iban                  String
  pdfCgv                String?       // Optional - path/URL to PDF file
  userProfiles  UserProfile[]
  devises       Devis[]       @relation("ProfileDevis")
}
enum NotificationType {
  UserRegister
  MAILSENT
  EVENTREMINDER
}

model Notification {
  id         Int              @id @default(autoincrement())

  // Receiver of the notification (optional)
  userId     Int?
  user       User?            @relation("NotificationReceiver", fields: [userId], references: [id])

  // Creator of the notification (optional)
  addedId    Int?
  addedBy    User?            @relation("NotificationCreator", fields: [addedId], references: [id])

  message    String
  type       NotificationType
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
}


model UserProfile {
  userId     Int
  profileId  Int

  user       User    @relation(fields: [userId], references: [id])
  profile    Profile @relation(fields: [profileId], references: [id])

  @@id([userId, profileId])
}

model Devis {
  id                      Int       @id @default(autoincrement())
  date                    DateTime  @default(now())
  volume                  Float

  adresseDepart           String
  typeLogementDepart      TypeLogement
  etageDepart             Int
  ascenseurDepart         AscenseurType
  distancePortageDepart   DistancePortageType
  dateDepart              DateTime
  monteMeubleDepart       Boolean

  adresseLivraison        String
  typeLogementLivraison   TypeLogement
  etageLivraison          Int
  ascenseurLivraison      AscenseurType
  distancePortageLivraison DistancePortageType
  dateLivraison           DateTime
  monteMeubleLivraison    Boolean
  prixDevis              Decimal @default(0.0)
  options                 OptionType[] // Enum list
  etat                    EtatDevis
  distance                 Float? @default(0.0) // Optional distance field
  userId     Int
  user       User     @relation("UserDevis", fields: [userId], references: [id])

  profileId  Int
  profile    Profile  @relation("ProfileDevis", fields: [profileId], references: [id])

  clientId   Int
  client     Client   @relation(fields: [clientId], references: [id])
}

model CalendarEvent {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])

  title          String
  description    String?
  location       String?

  startDateTime  DateTime
  endDateTime    DateTime

  isAllDay       Boolean       @default(false)

  recurrence     RecurrenceType? 

  reminderMinutes Int?

  status         EventStatus   @default(SCHEDULED)

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum EventStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum EtatDevis {
  BROUILLON
  ARCHIVE
  GAGNE
  PERDU
  ENVOYEE
  EN_COURS
}

enum OptionType {
  PACK_CARTONS
  REPORT_DE_DATE
  FLEXIBILITE_SUR_DATE
  DEBALLAGE_ET_REMONTAGE
  EMBALLAGE_FRAGILE
  EMBALLAGE_CARTONS
  AUTORISATION_STATIONNEMENT
  TRANSPORT_DES_VETEMENTS
}

enum TypeLogement {
  APPARTEMENT
  MAISON
  STUDIO
  DUPLEX
  BUREAU
  GARDE_MEUBLE
}

enum AscenseurType {
  SANS_ASCENSEUR
  PERSONNES_1_2
  PERSONNES_3_4
  PERSONNES_5_6
  PERSONNES_7_8
  TOUT_RENTRE
}

enum DistancePortageType {
  M_0_10
  M_11_20
  M_21_30
  M_31_40
  M_41_50
  M_51_60
  M_61_70
  M_71_80
  M_81_90
  M_91_100
  MORE_100
}

enum Role {
  ADMIN
  EMPLOYEE
}
