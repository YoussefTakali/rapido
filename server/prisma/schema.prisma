generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  phoneNumber    String
  dateOfBirth    DateTime
  role           Role
  createdAt      DateTime         @default(now()) 
  profilePicture String?
  userProfiles   UserProfile[]
  devises        Devis[]          @relation("UserDevis")

  calendarEvents CalendarEvent[]  // <-- added back-relation for calendar events
}

model Client {
  id        Int     @id @default(autoincrement())
  nom       String
  prenom    String
  email     String  @unique
  telephone String
  devis     Devis[]
}

model Profile {
  id                    Int           @id @default(autoincrement())
  name                  String
  email                 String
  phone                 String
  companyName           String
  formeJuridique        String
  capitalSocial         Decimal
  siret                 String
  tva                   String
  rcsOuRm               String
  adresse               String
  logo                  String?       // Optional - path/URL to logo image
  nomAssurance          String
  montantMobilier       Decimal
  montantMaxParObjet    Decimal
  franchise             Decimal
  pourcentageAcompte    Decimal
  bic                   String
  iban                  String
  pdfCgv                String?       // Optional - path/URL to PDF file

  userProfiles  UserProfile[]
  devises       Devis[]       @relation("ProfileDevis")
}

model UserProfile {
  userId     Int
  profileId  Int

  user       User    @relation(fields: [userId], references: [id])
  profile    Profile @relation(fields: [profileId], references: [id])

  @@id([userId, profileId])
}

model Devis {
  id                      Int       @id @default(autoincrement())
  date                    DateTime  @default(now())
  volume                  Float

  adresseDepart           String
  typeLogementDepart      TypeLogement
  etageDepart             Int
  ascenseurDepart         AscenseurType
  distancePortageDepart   DistancePortageType
  dateDepart              DateTime
  monteMeubleDepart       Boolean

  adresseLivraison        String
  typeLogementLivraison   TypeLogement
  etageLivraison          Int
  ascenseurLivraison      AscenseurType
  distancePortageLivraison DistancePortageType
  dateLivraison           DateTime
  monteMeubleLivraison    Boolean
  prixDevis              Decimal @default(0.0)
  options                 OptionType[] // Enum list
  etat                    EtatDevis

  userId     Int
  user       User     @relation("UserDevis", fields: [userId], references: [id])

  profileId  Int
  profile    Profile  @relation("ProfileDevis", fields: [profileId], references: [id])

  clientId   Int
  client     Client   @relation(fields: [clientId], references: [id])
}

model CalendarEvent {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])

  title          String
  description    String?
  location       String?

  startDateTime  DateTime
  endDateTime    DateTime

  isAllDay       Boolean       @default(false)

  recurrence     RecurrenceType? 

  reminderMinutes Int?

  status         EventStatus   @default(SCHEDULED)

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum EventStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum EtatDevis {
  BROUILLON
  ARCHIVE
  GAGNE
  PERDU
  ENVOYEE
  EN_COURS
}

enum OptionType {
  DEMONTAGE 
  REMONTAGE
  EMBALLAGE
  DEBALLAGE
  TRANSPORT
  GARDE_MEUBLE
  MANUTENTION
}

enum TypeLogement {
  APPARTEMENT
  MAISON
  STUDIO
  DUPLEX
  BUREAU
  GARDE_MEUBLE
}

enum AscenseurType {
  SANS_ASCENSEUR
  TYPE1
  TYPE2
  TYPE3
  TYPE4
  TYPE5
}

enum DistancePortageType {
  TYPE1
  TYPE2
  TYPE3
  TYPE4
  TYPE5
  TYPE6
  TYPE7
  TYPE8
  TYPE9
  TYPE10
  TYPE11
}

enum Role {
  ADMIN
  EMPLOYEE
}
